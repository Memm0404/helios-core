syntax = "proto3";
package helios.feedistribution.v1;

import "gogoproto/gogo.proto";
import "cosmos/msg/v1/msg.proto";
import "helios/feedistribution/v1/params.proto";
import "cosmos_proto/cosmos.proto";

option go_package = "helios-core/helios-chain/x/feedistribution/types";

// Msg defines the fee distribution Msg service.
service Msg {
  // UpdateParams defines a governance operation for updating the
  // x/feedistribution module parameters. The authority is defined in the
  // keeper.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);

  // RegisterRevenue registers a contract for fee distribution
  rpc RegisterRevenue(MsgRegisterRevenue) returns (MsgRegisterRevenueResponse);

  // UpdateRevenue updates the withdraw address for a registered contract
  rpc UpdateRevenue(MsgUpdateRevenue) returns (MsgUpdateRevenueResponse);

  // CancelRevenue removes a contract from fee distribution
  rpc CancelRevenue(MsgCancelRevenue) returns (MsgCancelRevenueResponse);
}

// MsgUpdateParams defines the request type for updating the module parameters.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address of the governance account.
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the x/feedistribution parameters to update.
  // NOTE: All parameters must be supplied.
  Params params = 2 [ (gogoproto.nullable) = false ];
}

// MsgUpdateParamsResponse defines the response type for updating the module
// parameters.
message MsgUpdateParamsResponse {}

// MsgRegisterRevenue defines the request type for registering a contract for fee distribution
message MsgRegisterRevenue {
  option (cosmos.msg.v1.signer) = "deployer_address";

  // contract_address is the hex address of the smart contract
  string contract_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // deployer_address is the bech32 address of the contract deployer
  string deployer_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // withdrawer_address is the bech32 address of the account that can withdraw the revenue fees
  string withdrawer_address = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // nonces is an array of nonces from the address path, where the last nonce is the nonce
  // that determines the contract's address - it can be an EOA nonce or a
  // factory contract nonce
  repeated uint64 nonces = 4;
}  

// MsgRegisterRevenueResponse defines the response type for the RegisterRevenue RPC
message MsgRegisterRevenueResponse {}

// MsgUpdateRevenue defines the request type for updating the withdraw address for a registered contract
message MsgUpdateRevenue {
  option (cosmos.msg.v1.signer) = "deployer_address";

  // contract_address is the hex address of the smart contract
  string contract_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // deployer_address is the bech32 address of the contract deployer
  string deployer_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // withdrawer_address is the bech32 address of the account that can withdraw the revenue fees
  string withdrawer_address = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgUpdateRevenueResponse defines the response type for the UpdateRevenue RPC
message MsgUpdateRevenueResponse {}

// MsgCancelRevenue defines the request type for removing a contract from fee distribution
message MsgCancelRevenue {
  option (cosmos.msg.v1.signer) = "deployer_address";

  // contract_address is the hex address of the smart contract
  string contract_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // deployer_address is the bech32 address of the contract deployer
  string deployer_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgCancelRevenueResponse defines the response type for the CancelRevenue RPC
message MsgCancelRevenueResponse {}