// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: helios/chronos/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/wrapperspb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgCreateCron struct {
	OwnerAddress    string   `protobuf:"bytes,1,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
	ContractAddress string   `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	AbiJson         string   `protobuf:"bytes,3,opt,name=abi_json,json=abiJson,proto3" json:"abi_json,omitempty"`
	MethodName      string   `protobuf:"bytes,4,opt,name=method_name,json=methodName,proto3" json:"method_name,omitempty"`
	Params          []string `protobuf:"bytes,5,rep,name=params,proto3" json:"params,omitempty"`
	Frequency       uint64   `protobuf:"varint,6,opt,name=frequency,proto3" json:"frequency,omitempty"`
	ExpirationBlock uint64   `protobuf:"varint,7,opt,name=expiration_block,json=expirationBlock,proto3" json:"expiration_block,omitempty"`
	GasLimit        uint64   `protobuf:"varint,8,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	MaxGasPrice     uint64   `protobuf:"varint,9,opt,name=max_gas_price,json=maxGasPrice,proto3" json:"max_gas_price,omitempty"`
	Sender          string   `protobuf:"bytes,10,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgCreateCron) Reset()         { *m = MsgCreateCron{} }
func (m *MsgCreateCron) String() string { return proto.CompactTextString(m) }
func (*MsgCreateCron) ProtoMessage()    {}
func (*MsgCreateCron) Descriptor() ([]byte, []int) {
	return fileDescriptor_0791d34d8d50f9af, []int{0}
}
func (m *MsgCreateCron) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateCron) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateCron.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateCron) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateCron.Merge(m, src)
}
func (m *MsgCreateCron) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateCron) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateCron.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateCron proto.InternalMessageInfo

func (m *MsgCreateCron) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

func (m *MsgCreateCron) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *MsgCreateCron) GetAbiJson() string {
	if m != nil {
		return m.AbiJson
	}
	return ""
}

func (m *MsgCreateCron) GetMethodName() string {
	if m != nil {
		return m.MethodName
	}
	return ""
}

func (m *MsgCreateCron) GetParams() []string {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *MsgCreateCron) GetFrequency() uint64 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *MsgCreateCron) GetExpirationBlock() uint64 {
	if m != nil {
		return m.ExpirationBlock
	}
	return 0
}

func (m *MsgCreateCron) GetGasLimit() uint64 {
	if m != nil {
		return m.GasLimit
	}
	return 0
}

func (m *MsgCreateCron) GetMaxGasPrice() uint64 {
	if m != nil {
		return m.MaxGasPrice
	}
	return 0
}

func (m *MsgCreateCron) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

type MsgCreateCronResponse struct {
	CronId uint64 `protobuf:"varint,1,opt,name=cron_id,json=cronId,proto3" json:"cron_id,omitempty"`
}

func (m *MsgCreateCronResponse) Reset()         { *m = MsgCreateCronResponse{} }
func (m *MsgCreateCronResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateCronResponse) ProtoMessage()    {}
func (*MsgCreateCronResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0791d34d8d50f9af, []int{1}
}
func (m *MsgCreateCronResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateCronResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateCronResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateCronResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateCronResponse.Merge(m, src)
}
func (m *MsgCreateCronResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateCronResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateCronResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateCronResponse proto.InternalMessageInfo

func (m *MsgCreateCronResponse) GetCronId() uint64 {
	if m != nil {
		return m.CronId
	}
	return 0
}

type MsgUpdateCron struct {
	CronId             uint64   `protobuf:"varint,1,opt,name=cron_id,json=cronId,proto3" json:"cron_id,omitempty"`
	OwnerAddress       string   `protobuf:"bytes,2,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
	NewFrequency       uint64   `protobuf:"varint,3,opt,name=new_frequency,json=newFrequency,proto3" json:"new_frequency,omitempty"`
	NewParams          []string `protobuf:"bytes,4,rep,name=new_params,json=newParams,proto3" json:"new_params,omitempty"`
	NewExpirationBlock uint64   `protobuf:"varint,5,opt,name=new_expiration_block,json=newExpirationBlock,proto3" json:"new_expiration_block,omitempty"`
	NewGasLimit        uint64   `protobuf:"varint,6,opt,name=new_gas_limit,json=newGasLimit,proto3" json:"new_gas_limit,omitempty"`
	NewMaxGasPrice     uint64   `protobuf:"varint,7,opt,name=new_max_gas_price,json=newMaxGasPrice,proto3" json:"new_max_gas_price,omitempty"`
	Sender             string   `protobuf:"bytes,8,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgUpdateCron) Reset()         { *m = MsgUpdateCron{} }
func (m *MsgUpdateCron) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateCron) ProtoMessage()    {}
func (*MsgUpdateCron) Descriptor() ([]byte, []int) {
	return fileDescriptor_0791d34d8d50f9af, []int{2}
}
func (m *MsgUpdateCron) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateCron) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateCron.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateCron) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateCron.Merge(m, src)
}
func (m *MsgUpdateCron) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateCron) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateCron.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateCron proto.InternalMessageInfo

func (m *MsgUpdateCron) GetCronId() uint64 {
	if m != nil {
		return m.CronId
	}
	return 0
}

func (m *MsgUpdateCron) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

func (m *MsgUpdateCron) GetNewFrequency() uint64 {
	if m != nil {
		return m.NewFrequency
	}
	return 0
}

func (m *MsgUpdateCron) GetNewParams() []string {
	if m != nil {
		return m.NewParams
	}
	return nil
}

func (m *MsgUpdateCron) GetNewExpirationBlock() uint64 {
	if m != nil {
		return m.NewExpirationBlock
	}
	return 0
}

func (m *MsgUpdateCron) GetNewGasLimit() uint64 {
	if m != nil {
		return m.NewGasLimit
	}
	return 0
}

func (m *MsgUpdateCron) GetNewMaxGasPrice() uint64 {
	if m != nil {
		return m.NewMaxGasPrice
	}
	return 0
}

func (m *MsgUpdateCron) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

type MsgUpdateCronResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (m *MsgUpdateCronResponse) Reset()         { *m = MsgUpdateCronResponse{} }
func (m *MsgUpdateCronResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateCronResponse) ProtoMessage()    {}
func (*MsgUpdateCronResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0791d34d8d50f9af, []int{3}
}
func (m *MsgUpdateCronResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateCronResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateCronResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateCronResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateCronResponse.Merge(m, src)
}
func (m *MsgUpdateCronResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateCronResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateCronResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateCronResponse proto.InternalMessageInfo

func (m *MsgUpdateCronResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type MsgCancelCron struct {
	OwnerAddress string `protobuf:"bytes,1,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
	CronId       uint64 `protobuf:"varint,2,opt,name=cron_id,json=cronId,proto3" json:"cron_id,omitempty"`
	Sender       string `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgCancelCron) Reset()         { *m = MsgCancelCron{} }
func (m *MsgCancelCron) String() string { return proto.CompactTextString(m) }
func (*MsgCancelCron) ProtoMessage()    {}
func (*MsgCancelCron) Descriptor() ([]byte, []int) {
	return fileDescriptor_0791d34d8d50f9af, []int{4}
}
func (m *MsgCancelCron) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelCron) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelCron.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelCron) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelCron.Merge(m, src)
}
func (m *MsgCancelCron) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelCron) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelCron.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelCron proto.InternalMessageInfo

func (m *MsgCancelCron) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

func (m *MsgCancelCron) GetCronId() uint64 {
	if m != nil {
		return m.CronId
	}
	return 0
}

func (m *MsgCancelCron) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

type MsgCancelCronResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (m *MsgCancelCronResponse) Reset()         { *m = MsgCancelCronResponse{} }
func (m *MsgCancelCronResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCancelCronResponse) ProtoMessage()    {}
func (*MsgCancelCronResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0791d34d8d50f9af, []int{5}
}
func (m *MsgCancelCronResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelCronResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelCronResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelCronResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelCronResponse.Merge(m, src)
}
func (m *MsgCancelCronResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelCronResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelCronResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelCronResponse proto.InternalMessageInfo

func (m *MsgCancelCronResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*MsgCreateCron)(nil), "helios.chronos.v1.MsgCreateCron")
	proto.RegisterType((*MsgCreateCronResponse)(nil), "helios.chronos.v1.MsgCreateCronResponse")
	proto.RegisterType((*MsgUpdateCron)(nil), "helios.chronos.v1.MsgUpdateCron")
	proto.RegisterType((*MsgUpdateCronResponse)(nil), "helios.chronos.v1.MsgUpdateCronResponse")
	proto.RegisterType((*MsgCancelCron)(nil), "helios.chronos.v1.MsgCancelCron")
	proto.RegisterType((*MsgCancelCronResponse)(nil), "helios.chronos.v1.MsgCancelCronResponse")
}

func init() { proto.RegisterFile("helios/chronos/v1/tx.proto", fileDescriptor_0791d34d8d50f9af) }

var fileDescriptor_0791d34d8d50f9af = []byte{
	// 671 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0x86, 0x9b, 0x9f, 0xe6, 0x67, 0xd2, 0x7c, 0xfd, 0x6a, 0x15, 0xea, 0x06, 0x30, 0x51, 0xba,
	0x49, 0x2b, 0x11, 0x37, 0xb0, 0x63, 0x47, 0x2b, 0xa8, 0x40, 0x14, 0x55, 0x91, 0x90, 0x2a, 0x36,
	0xd6, 0x78, 0x7c, 0xea, 0x18, 0xe2, 0x19, 0x33, 0xe3, 0xd6, 0xe9, 0x0e, 0x71, 0x05, 0xac, 0xb9,
	0x8a, 0xee, 0xb8, 0x05, 0x96, 0x5d, 0xb2, 0x44, 0xe9, 0xa2, 0xb7, 0x81, 0x66, 0xc6, 0x8e, 0x1b,
	0xd2, 0xa8, 0xec, 0xe6, 0xbc, 0xe7, 0x9d, 0x33, 0x47, 0xcf, 0x99, 0x19, 0xd4, 0x1a, 0xc2, 0x28,
	0x60, 0xc2, 0x26, 0x43, 0xce, 0x28, 0x13, 0xf6, 0x59, 0xdf, 0x8e, 0xc7, 0xbd, 0x88, 0xb3, 0x98,
	0x19, 0x6b, 0x3a, 0xd7, 0x4b, 0x73, 0xbd, 0xb3, 0x7e, 0xcb, 0x22, 0x4c, 0x84, 0x4c, 0xd8, 0x2e,
	0x16, 0x60, 0x9f, 0xf5, 0x5d, 0x88, 0x71, 0xdf, 0x26, 0x2c, 0xa0, 0x7a, 0x4b, 0x6b, 0x23, 0xcd,
	0x87, 0xc2, 0x97, 0xa5, 0x42, 0xe1, 0xa7, 0x89, 0x4d, 0x9d, 0x70, 0x54, 0x64, 0xeb, 0x20, 0x4d,
	0xad, 0xfb, 0xcc, 0x67, 0x5a, 0x97, 0xab, 0x54, 0xb5, 0x7c, 0xc6, 0xfc, 0x11, 0xd8, 0x2a, 0x72,
	0x4f, 0x4f, 0xec, 0x84, 0xe3, 0x28, 0x02, 0x9e, 0xee, 0xea, 0x4c, 0x8a, 0xa8, 0x79, 0x28, 0xfc,
	0x7d, 0x0e, 0x38, 0x86, 0x7d, 0xce, 0xa8, 0xb1, 0x85, 0x9a, 0x2c, 0xa1, 0xc0, 0x1d, 0xec, 0x79,
	0x1c, 0x84, 0x30, 0x0b, 0xed, 0x42, 0xb7, 0x3e, 0x58, 0x51, 0xe2, 0x0b, 0xad, 0x19, 0xdb, 0xe8,
	0x7f, 0xc2, 0x68, 0xcc, 0x31, 0x89, 0xa7, 0xbe, 0xa2, 0xf2, 0xad, 0x66, 0x7a, 0x66, 0xdd, 0x44,
	0x35, 0xec, 0x06, 0xce, 0x47, 0xc1, 0xa8, 0x59, 0x52, 0x96, 0x2a, 0x76, 0x83, 0x37, 0x82, 0x51,
	0xe3, 0x31, 0x6a, 0x84, 0x10, 0x0f, 0x99, 0xe7, 0x50, 0x1c, 0x82, 0x59, 0x56, 0x59, 0xa4, 0xa5,
	0x77, 0x38, 0x04, 0xe3, 0x3e, 0xaa, 0x44, 0x98, 0xe3, 0x50, 0x98, 0xcb, 0xed, 0x52, 0xb7, 0x3e,
	0x48, 0x23, 0xe3, 0x21, 0xaa, 0x9f, 0x70, 0xf8, 0x7c, 0x0a, 0x94, 0x9c, 0x9b, 0x95, 0x76, 0xa1,
	0x5b, 0x1e, 0xe4, 0x82, 0x6c, 0x0e, 0xc6, 0x51, 0xc0, 0x71, 0x1c, 0x30, 0xea, 0xb8, 0x23, 0x46,
	0x3e, 0x99, 0x55, 0x65, 0x5a, 0xcd, 0xf5, 0x3d, 0x29, 0x1b, 0x0f, 0x50, 0xdd, 0xc7, 0xc2, 0x19,
	0x05, 0x61, 0x10, 0x9b, 0x35, 0xe5, 0xa9, 0xf9, 0x58, 0xbc, 0x95, 0xb1, 0xd1, 0x41, 0xcd, 0x10,
	0x8f, 0x1d, 0x69, 0x88, 0x78, 0x40, 0xc0, 0xac, 0x2b, 0x43, 0x23, 0xc4, 0xe3, 0x03, 0x2c, 0x8e,
	0xa4, 0x24, 0x3b, 0x14, 0x40, 0x3d, 0xe0, 0x26, 0x52, 0xdd, 0xa7, 0xd1, 0xf3, 0xc6, 0xd7, 0xeb,
	0x8b, 0x9d, 0x34, 0xe8, 0xec, 0xa2, 0x7b, 0x33, 0x8c, 0x07, 0x20, 0x22, 0x46, 0x05, 0x18, 0x1b,
	0xa8, 0x4a, 0x38, 0xa3, 0x4e, 0xe0, 0x29, 0xca, 0xe5, 0x41, 0x45, 0x86, 0xaf, 0xbd, 0xce, 0x0f,
	0x3d, 0x96, 0xf7, 0x91, 0x97, 0x8d, 0x65, 0x91, 0x75, 0x7e, 0x5e, 0xc5, 0x5b, 0xe6, 0xb5, 0x85,
	0x9a, 0x14, 0x12, 0x27, 0x87, 0x56, 0x52, 0x35, 0x56, 0x28, 0x24, 0xaf, 0xa6, 0xdc, 0x1e, 0x21,
	0x24, 0x4d, 0x29, 0xf1, 0xb2, 0x22, 0x5e, 0xa7, 0x90, 0x1c, 0x69, 0xe8, 0xbb, 0x68, 0x5d, 0xa6,
	0xe7, 0xd0, 0x2e, 0xab, 0x52, 0x06, 0x85, 0xe4, 0xe5, 0x5f, 0x74, 0x3b, 0xfa, 0xd4, 0x9c, 0xb0,
	0x1e, 0x55, 0x83, 0x42, 0x72, 0x90, 0x41, 0xde, 0x46, 0x6b, 0xd2, 0x33, 0x0b, 0x5a, 0x4f, 0xeb,
	0x3f, 0x0a, 0xc9, 0xe1, 0xad, 0xac, 0x6b, 0x8b, 0x59, 0xf7, 0x15, 0xeb, 0x1c, 0xdc, 0x94, 0xb5,
	0x89, 0xaa, 0xe2, 0x94, 0x90, 0xec, 0x46, 0xd7, 0x06, 0x59, 0xd8, 0xe1, 0xfa, 0x09, 0x60, 0x4a,
	0x60, 0xf4, 0xef, 0x4f, 0xe0, 0xc6, 0x40, 0x8a, 0x33, 0x03, 0xc9, 0xdb, 0x2c, 0xdd, 0xd5, 0x66,
	0x7e, 0xe6, 0xdd, 0x6d, 0x3e, 0xfd, 0x5e, 0x44, 0xa5, 0x43, 0xe1, 0x1b, 0xc7, 0x08, 0xdd, 0x78,
	0xae, 0xed, 0xde, 0xdc, 0xf7, 0xd2, 0x9b, 0xb9, 0x6c, 0xad, 0xee, 0x5d, 0x8e, 0xe9, 0xd9, 0xc7,
	0x08, 0xdd, 0xb8, 0x71, 0x0b, 0x2a, 0xe7, 0x8e, 0x45, 0x95, 0x6f, 0x81, 0x2f, 0x7b, 0xce, 0xf9,
	0x2e, 0xea, 0x79, 0xea, 0x58, 0xd8, 0xf3, 0x1c, 0xaf, 0xd6, 0xf2, 0x97, 0xeb, 0x8b, 0x9d, 0xc2,
	0xde, 0xde, 0xcf, 0x89, 0x55, 0xb8, 0x9c, 0x58, 0x85, 0xdf, 0x13, 0xab, 0xf0, 0xed, 0xca, 0x5a,
	0xba, 0xbc, 0xb2, 0x96, 0x7e, 0x5d, 0x59, 0x4b, 0x1f, 0xba, 0xba, 0xd2, 0x13, 0xc2, 0x38, 0xd8,
	0xd9, 0x7a, 0x88, 0x03, 0x6a, 0x8f, 0xa7, 0xdf, 0x75, 0x7c, 0x1e, 0x81, 0x70, 0x2b, 0xea, 0x4b,
	0x7c, 0xf6, 0x27, 0x00, 0x00, 0xff, 0xff, 0x9f, 0x74, 0xf9, 0xe5, 0xcd, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	CreateCron(ctx context.Context, in *MsgCreateCron, opts ...grpc.CallOption) (*MsgCreateCronResponse, error)
	UpdateCron(ctx context.Context, in *MsgUpdateCron, opts ...grpc.CallOption) (*MsgUpdateCronResponse, error)
	CancelCron(ctx context.Context, in *MsgCancelCron, opts ...grpc.CallOption) (*MsgCancelCronResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateCron(ctx context.Context, in *MsgCreateCron, opts ...grpc.CallOption) (*MsgCreateCronResponse, error) {
	out := new(MsgCreateCronResponse)
	err := c.cc.Invoke(ctx, "/helios.chronos.v1.Msg/CreateCron", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateCron(ctx context.Context, in *MsgUpdateCron, opts ...grpc.CallOption) (*MsgUpdateCronResponse, error) {
	out := new(MsgUpdateCronResponse)
	err := c.cc.Invoke(ctx, "/helios.chronos.v1.Msg/UpdateCron", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelCron(ctx context.Context, in *MsgCancelCron, opts ...grpc.CallOption) (*MsgCancelCronResponse, error) {
	out := new(MsgCancelCronResponse)
	err := c.cc.Invoke(ctx, "/helios.chronos.v1.Msg/CancelCron", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	CreateCron(context.Context, *MsgCreateCron) (*MsgCreateCronResponse, error)
	UpdateCron(context.Context, *MsgUpdateCron) (*MsgUpdateCronResponse, error)
	CancelCron(context.Context, *MsgCancelCron) (*MsgCancelCronResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateCron(ctx context.Context, req *MsgCreateCron) (*MsgCreateCronResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCron not implemented")
}
func (*UnimplementedMsgServer) UpdateCron(ctx context.Context, req *MsgUpdateCron) (*MsgUpdateCronResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCron not implemented")
}
func (*UnimplementedMsgServer) CancelCron(ctx context.Context, req *MsgCancelCron) (*MsgCancelCronResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelCron not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateCron_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateCron)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateCron(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.chronos.v1.Msg/CreateCron",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateCron(ctx, req.(*MsgCreateCron))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateCron_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateCron)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateCron(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.chronos.v1.Msg/UpdateCron",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateCron(ctx, req.(*MsgUpdateCron))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelCron_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelCron)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelCron(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.chronos.v1.Msg/CancelCron",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelCron(ctx, req.(*MsgCancelCron))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "helios.chronos.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCron",
			Handler:    _Msg_CreateCron_Handler,
		},
		{
			MethodName: "UpdateCron",
			Handler:    _Msg_UpdateCron_Handler,
		},
		{
			MethodName: "CancelCron",
			Handler:    _Msg_CancelCron_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helios/chronos/v1/tx.proto",
}

func (m *MsgCreateCron) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateCron) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateCron) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x52
	}
	if m.MaxGasPrice != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MaxGasPrice))
		i--
		dAtA[i] = 0x48
	}
	if m.GasLimit != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.GasLimit))
		i--
		dAtA[i] = 0x40
	}
	if m.ExpirationBlock != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ExpirationBlock))
		i--
		dAtA[i] = 0x38
	}
	if m.Frequency != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Frequency))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Params) > 0 {
		for iNdEx := len(m.Params) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Params[iNdEx])
			copy(dAtA[i:], m.Params[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Params[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.MethodName) > 0 {
		i -= len(m.MethodName)
		copy(dAtA[i:], m.MethodName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MethodName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AbiJson) > 0 {
		i -= len(m.AbiJson)
		copy(dAtA[i:], m.AbiJson)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AbiJson)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateCronResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateCronResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateCronResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CronId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CronId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateCron) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateCron) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateCron) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x42
	}
	if m.NewMaxGasPrice != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.NewMaxGasPrice))
		i--
		dAtA[i] = 0x38
	}
	if m.NewGasLimit != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.NewGasLimit))
		i--
		dAtA[i] = 0x30
	}
	if m.NewExpirationBlock != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.NewExpirationBlock))
		i--
		dAtA[i] = 0x28
	}
	if len(m.NewParams) > 0 {
		for iNdEx := len(m.NewParams) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.NewParams[iNdEx])
			copy(dAtA[i:], m.NewParams[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.NewParams[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.NewFrequency != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.NewFrequency))
		i--
		dAtA[i] = 0x18
	}
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.CronId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CronId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateCronResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateCronResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateCronResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelCron) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelCron) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelCron) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CronId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CronId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelCronResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelCronResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelCronResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateCron) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AbiJson)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MethodName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Params) > 0 {
		for _, s := range m.Params {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.Frequency != 0 {
		n += 1 + sovTx(uint64(m.Frequency))
	}
	if m.ExpirationBlock != 0 {
		n += 1 + sovTx(uint64(m.ExpirationBlock))
	}
	if m.GasLimit != 0 {
		n += 1 + sovTx(uint64(m.GasLimit))
	}
	if m.MaxGasPrice != 0 {
		n += 1 + sovTx(uint64(m.MaxGasPrice))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateCronResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CronId != 0 {
		n += 1 + sovTx(uint64(m.CronId))
	}
	return n
}

func (m *MsgUpdateCron) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CronId != 0 {
		n += 1 + sovTx(uint64(m.CronId))
	}
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.NewFrequency != 0 {
		n += 1 + sovTx(uint64(m.NewFrequency))
	}
	if len(m.NewParams) > 0 {
		for _, s := range m.NewParams {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.NewExpirationBlock != 0 {
		n += 1 + sovTx(uint64(m.NewExpirationBlock))
	}
	if m.NewGasLimit != 0 {
		n += 1 + sovTx(uint64(m.NewGasLimit))
	}
	if m.NewMaxGasPrice != 0 {
		n += 1 + sovTx(uint64(m.NewMaxGasPrice))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateCronResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	return n
}

func (m *MsgCancelCron) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CronId != 0 {
		n += 1 + sovTx(uint64(m.CronId))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCancelCronResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateCron) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateCron: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateCron: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbiJson", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AbiJson = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MethodName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MethodName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Params = append(m.Params, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frequency", wireType)
			}
			m.Frequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Frequency |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationBlock", wireType)
			}
			m.ExpirationBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirationBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
			}
			m.GasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxGasPrice", wireType)
			}
			m.MaxGasPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxGasPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateCronResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateCronResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateCronResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CronId", wireType)
			}
			m.CronId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CronId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateCron) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateCron: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateCron: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CronId", wireType)
			}
			m.CronId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CronId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewFrequency", wireType)
			}
			m.NewFrequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewFrequency |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewParams", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewParams = append(m.NewParams, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewExpirationBlock", wireType)
			}
			m.NewExpirationBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewExpirationBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewGasLimit", wireType)
			}
			m.NewGasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewGasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewMaxGasPrice", wireType)
			}
			m.NewMaxGasPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewMaxGasPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateCronResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateCronResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateCronResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelCron) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelCron: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelCron: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CronId", wireType)
			}
			m.CronId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CronId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelCronResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelCronResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelCronResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
