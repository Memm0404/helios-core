// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: helios/chronos/v1/schedule.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Defines when messages will be executed in the block
type ExecutionStage int32

const (
	ExecutionStage_EXECUTION_STAGE_END_BLOCKER   ExecutionStage = 0
	ExecutionStage_EXECUTION_STAGE_BEGIN_BLOCKER ExecutionStage = 1
)

var ExecutionStage_name = map[int32]string{
	0: "EXECUTION_STAGE_END_BLOCKER",
	1: "EXECUTION_STAGE_BEGIN_BLOCKER",
}

var ExecutionStage_value = map[string]int32{
	"EXECUTION_STAGE_END_BLOCKER":   0,
	"EXECUTION_STAGE_BEGIN_BLOCKER": 1,
}

func (x ExecutionStage) String() string {
	return proto.EnumName(ExecutionStage_name, int32(x))
}

func (ExecutionStage) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1206d0259de4e6fb, []int{0}
}

// Schedule for autonomous EVM smart-contract execution
type Schedule struct {
	Id                 uint64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	OwnerAddress       string         `protobuf:"bytes,2,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
	ContractAddress    string         `protobuf:"bytes,3,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	AbiJson            string         `protobuf:"bytes,4,opt,name=abi_json,json=abiJson,proto3" json:"abi_json,omitempty"`
	MethodName         string         `protobuf:"bytes,5,opt,name=method_name,json=methodName,proto3" json:"method_name,omitempty"`
	Params             []string       `protobuf:"bytes,6,rep,name=params,proto3" json:"params,omitempty"`
	Frequency          uint64         `protobuf:"varint,7,opt,name=frequency,proto3" json:"frequency,omitempty"`
	NextExecutionBlock uint64         `protobuf:"varint,8,opt,name=next_execution_block,json=nextExecutionBlock,proto3" json:"next_execution_block,omitempty"`
	ExpirationBlock    uint64         `protobuf:"varint,9,opt,name=expiration_block,json=expirationBlock,proto3" json:"expiration_block,omitempty"`
	ExecutionStage     ExecutionStage `protobuf:"varint,10,opt,name=execution_stage,json=executionStage,proto3,enum=helios.chronos.v1.ExecutionStage" json:"execution_stage,omitempty"`
}

func (m *Schedule) Reset()         { *m = Schedule{} }
func (m *Schedule) String() string { return proto.CompactTextString(m) }
func (*Schedule) ProtoMessage()    {}
func (*Schedule) Descriptor() ([]byte, []int) {
	return fileDescriptor_1206d0259de4e6fb, []int{0}
}
func (m *Schedule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Schedule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Schedule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Schedule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Schedule.Merge(m, src)
}
func (m *Schedule) XXX_Size() int {
	return m.Size()
}
func (m *Schedule) XXX_DiscardUnknown() {
	xxx_messageInfo_Schedule.DiscardUnknown(m)
}

var xxx_messageInfo_Schedule proto.InternalMessageInfo

func (m *Schedule) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Schedule) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

func (m *Schedule) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *Schedule) GetAbiJson() string {
	if m != nil {
		return m.AbiJson
	}
	return ""
}

func (m *Schedule) GetMethodName() string {
	if m != nil {
		return m.MethodName
	}
	return ""
}

func (m *Schedule) GetParams() []string {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *Schedule) GetFrequency() uint64 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *Schedule) GetNextExecutionBlock() uint64 {
	if m != nil {
		return m.NextExecutionBlock
	}
	return 0
}

func (m *Schedule) GetExpirationBlock() uint64 {
	if m != nil {
		return m.ExpirationBlock
	}
	return 0
}

func (m *Schedule) GetExecutionStage() ExecutionStage {
	if m != nil {
		return m.ExecutionStage
	}
	return ExecutionStage_EXECUTION_STAGE_END_BLOCKER
}

func init() {
	proto.RegisterEnum("helios.chronos.v1.ExecutionStage", ExecutionStage_name, ExecutionStage_value)
	proto.RegisterType((*Schedule)(nil), "helios.chronos.v1.Schedule")
}

func init() { proto.RegisterFile("helios/chronos/v1/schedule.proto", fileDescriptor_1206d0259de4e6fb) }

var fileDescriptor_1206d0259de4e6fb = []byte{
	// 424 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0xd2, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0x06, 0xf0, 0xa6, 0x1d, 0x5d, 0xfb, 0x02, 0xed, 0xb0, 0x26, 0x14, 0xfe, 0x65, 0x19, 0x5c,
	0x02, 0x12, 0x09, 0x83, 0x4f, 0xb0, 0x8c, 0x68, 0xda, 0x40, 0x9d, 0x94, 0x16, 0x09, 0x71, 0x89,
	0xdc, 0xe4, 0xa5, 0x31, 0xb4, 0x76, 0xb1, 0xdd, 0xd1, 0x7d, 0x00, 0xee, 0x7c, 0x2c, 0x8e, 0x3b,
	0x72, 0x44, 0xed, 0x17, 0x41, 0x71, 0xda, 0x94, 0xb2, 0x9b, 0xfd, 0x3c, 0xbf, 0x24, 0x8e, 0xf5,
	0x82, 0x9b, 0xe3, 0x98, 0x09, 0x15, 0xa4, 0xb9, 0x14, 0x5c, 0xa8, 0xe0, 0xf2, 0x28, 0x50, 0x69,
	0x8e, 0xd9, 0x6c, 0x8c, 0xfe, 0x54, 0x0a, 0x2d, 0xc8, 0xbd, 0x52, 0xf8, 0x2b, 0xe1, 0x5f, 0x1e,
	0x3d, 0xdc, 0x1f, 0x89, 0x91, 0x30, 0x6d, 0x50, 0xac, 0x4a, 0xf8, 0xf4, 0x47, 0x03, 0x5a, 0xfd,
	0xd5, 0xb3, 0xa4, 0x03, 0x75, 0x96, 0xd9, 0x96, 0x6b, 0x79, 0x3b, 0x71, 0x9d, 0x65, 0xe4, 0x19,
	0xdc, 0x15, 0xdf, 0x39, 0xca, 0x84, 0x66, 0x99, 0x44, 0xa5, 0xec, 0xba, 0x6b, 0x79, 0xed, 0xf8,
	0x8e, 0x09, 0x8f, 0xcb, 0x8c, 0x3c, 0x87, 0xbd, 0x54, 0x70, 0x2d, 0x69, 0xaa, 0x2b, 0xd7, 0x30,
	0xae, 0xbb, 0xce, 0xd7, 0xf4, 0x01, 0xb4, 0xe8, 0x90, 0x25, 0x5f, 0x94, 0xe0, 0xf6, 0x8e, 0x21,
	0xbb, 0x74, 0xc8, 0xce, 0x95, 0xe0, 0xe4, 0x00, 0x6e, 0x4f, 0x50, 0xe7, 0x22, 0x4b, 0x38, 0x9d,
	0xa0, 0x7d, 0xcb, 0xb4, 0x50, 0x46, 0x3d, 0x3a, 0x41, 0x72, 0x1f, 0x9a, 0x53, 0x2a, 0xe9, 0x44,
	0xd9, 0x4d, 0xb7, 0xe1, 0xb5, 0xe3, 0xd5, 0x8e, 0x3c, 0x86, 0xf6, 0x67, 0x89, 0xdf, 0x66, 0xc8,
	0xd3, 0x2b, 0x7b, 0xd7, 0x1c, 0x7d, 0x13, 0x90, 0x57, 0xb0, 0xcf, 0x71, 0xae, 0x13, 0x9c, 0x63,
	0x3a, 0xd3, 0x4c, 0xf0, 0x64, 0x38, 0x16, 0xe9, 0x57, 0xbb, 0x65, 0x20, 0x29, 0xba, 0x68, 0x5d,
	0x85, 0x45, 0x53, 0xfc, 0x0e, 0xce, 0xa7, 0x4c, 0xd2, 0x7f, 0x74, 0xdb, 0xe8, 0xee, 0x26, 0x2f,
	0xe9, 0x39, 0x74, 0x37, 0xef, 0x55, 0x9a, 0x8e, 0xd0, 0x06, 0xd7, 0xf2, 0x3a, 0xaf, 0x0f, 0xfd,
	0x1b, 0xd7, 0xef, 0x57, 0x9f, 0xe9, 0x17, 0x30, 0xee, 0xe0, 0xd6, 0xfe, 0xc5, 0x00, 0x3a, 0xdb,
	0x82, 0x1c, 0xc0, 0xa3, 0xe8, 0x63, 0x74, 0xf2, 0x61, 0x70, 0x76, 0xd1, 0x4b, 0xfa, 0x83, 0xe3,
	0xd3, 0x28, 0x89, 0x7a, 0x6f, 0x93, 0xf0, 0xfd, 0xc5, 0xc9, 0xbb, 0x28, 0xde, 0xab, 0x91, 0x43,
	0x78, 0xf2, 0x3f, 0x08, 0xa3, 0xd3, 0xb3, 0x5e, 0x45, 0xac, 0x30, 0xfc, 0xb5, 0x70, 0xac, 0xeb,
	0x85, 0x63, 0xfd, 0x59, 0x38, 0xd6, 0xcf, 0xa5, 0x53, 0xbb, 0x5e, 0x3a, 0xb5, 0xdf, 0x4b, 0xa7,
	0xf6, 0xc9, 0x2b, 0x4f, 0xf8, 0x32, 0x15, 0x12, 0x83, 0xf5, 0x3a, 0xa7, 0x8c, 0x07, 0xf3, 0x6a,
	0xac, 0xf4, 0xd5, 0x14, 0xd5, 0xb0, 0x69, 0x06, 0xe5, 0xcd, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x15, 0x31, 0x01, 0x2b, 0x75, 0x02, 0x00, 0x00,
}

func (m *Schedule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Schedule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Schedule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExecutionStage != 0 {
		i = encodeVarintSchedule(dAtA, i, uint64(m.ExecutionStage))
		i--
		dAtA[i] = 0x50
	}
	if m.ExpirationBlock != 0 {
		i = encodeVarintSchedule(dAtA, i, uint64(m.ExpirationBlock))
		i--
		dAtA[i] = 0x48
	}
	if m.NextExecutionBlock != 0 {
		i = encodeVarintSchedule(dAtA, i, uint64(m.NextExecutionBlock))
		i--
		dAtA[i] = 0x40
	}
	if m.Frequency != 0 {
		i = encodeVarintSchedule(dAtA, i, uint64(m.Frequency))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Params) > 0 {
		for iNdEx := len(m.Params) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Params[iNdEx])
			copy(dAtA[i:], m.Params[iNdEx])
			i = encodeVarintSchedule(dAtA, i, uint64(len(m.Params[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.MethodName) > 0 {
		i -= len(m.MethodName)
		copy(dAtA[i:], m.MethodName)
		i = encodeVarintSchedule(dAtA, i, uint64(len(m.MethodName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AbiJson) > 0 {
		i -= len(m.AbiJson)
		copy(dAtA[i:], m.AbiJson)
		i = encodeVarintSchedule(dAtA, i, uint64(len(m.AbiJson)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintSchedule(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintSchedule(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintSchedule(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSchedule(dAtA []byte, offset int, v uint64) int {
	offset -= sovSchedule(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Schedule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSchedule(uint64(m.Id))
	}
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovSchedule(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovSchedule(uint64(l))
	}
	l = len(m.AbiJson)
	if l > 0 {
		n += 1 + l + sovSchedule(uint64(l))
	}
	l = len(m.MethodName)
	if l > 0 {
		n += 1 + l + sovSchedule(uint64(l))
	}
	if len(m.Params) > 0 {
		for _, s := range m.Params {
			l = len(s)
			n += 1 + l + sovSchedule(uint64(l))
		}
	}
	if m.Frequency != 0 {
		n += 1 + sovSchedule(uint64(m.Frequency))
	}
	if m.NextExecutionBlock != 0 {
		n += 1 + sovSchedule(uint64(m.NextExecutionBlock))
	}
	if m.ExpirationBlock != 0 {
		n += 1 + sovSchedule(uint64(m.ExpirationBlock))
	}
	if m.ExecutionStage != 0 {
		n += 1 + sovSchedule(uint64(m.ExecutionStage))
	}
	return n
}

func sovSchedule(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSchedule(x uint64) (n int) {
	return sovSchedule(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Schedule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchedule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Schedule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Schedule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchedule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchedule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchedule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchedule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbiJson", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchedule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchedule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AbiJson = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MethodName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchedule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchedule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MethodName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchedule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchedule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Params = append(m.Params, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frequency", wireType)
			}
			m.Frequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Frequency |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextExecutionBlock", wireType)
			}
			m.NextExecutionBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextExecutionBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationBlock", wireType)
			}
			m.ExpirationBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirationBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionStage", wireType)
			}
			m.ExecutionStage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecutionStage |= ExecutionStage(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchedule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSchedule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSchedule(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSchedule
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSchedule
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSchedule
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSchedule
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSchedule        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSchedule          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSchedule = fmt.Errorf("proto: unexpected end of group")
)
