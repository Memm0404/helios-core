// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: helios/feedistribution/v1/contract.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ContractInfo stores the deployer information for a smart contract
type ContractInfo struct {
	// contract_address is the hex address of the smart contract
	ContractAddress string `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	// deployer_address is the bech32 address of the account that deployed the
	// contract
	DeployerAddress string `protobuf:"bytes,2,opt,name=deployer_address,json=deployerAddress,proto3" json:"deployer_address,omitempty"`
	// withdrawer_address is the bech32 address of the account that can withdraw the fees
	WithdrawerAddress string `protobuf:"bytes,3,opt,name=withdrawer_address,json=withdrawerAddress,proto3" json:"withdrawer_address,omitempty"`
	// deployment_height is the block height at which the contract was deployed
	DeploymentHeight int64 `protobuf:"varint,4,opt,name=deployment_height,json=deploymentHeight,proto3" json:"deployment_height,omitempty"`
}

func (m *ContractInfo) Reset()         { *m = ContractInfo{} }
func (m *ContractInfo) String() string { return proto.CompactTextString(m) }
func (*ContractInfo) ProtoMessage()    {}
func (*ContractInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_1546a95288d9ea9e, []int{0}
}
func (m *ContractInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractInfo.Merge(m, src)
}
func (m *ContractInfo) XXX_Size() int {
	return m.Size()
}
func (m *ContractInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ContractInfo proto.InternalMessageInfo

func (m *ContractInfo) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *ContractInfo) GetDeployerAddress() string {
	if m != nil {
		return m.DeployerAddress
	}
	return ""
}

func (m *ContractInfo) GetWithdrawerAddress() string {
	if m != nil {
		return m.WithdrawerAddress
	}
	return ""
}

func (m *ContractInfo) GetDeploymentHeight() int64 {
	if m != nil {
		return m.DeploymentHeight
	}
	return 0
}

// BlockFees stores the accumulated fees for a specific contract in the current
// block
type BlockFees struct {
	// contract_address is the hex address of the smart contract
	ContractAddress string `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	// accumulated_fees stores the total fees accumulated for this contract in the
	// current block
	AccumulatedFees cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=accumulated_fees,json=accumulatedFees,proto3,customtype=cosmossdk.io/math.Int" json:"accumulated_fees"`
}

func (m *BlockFees) Reset()         { *m = BlockFees{} }
func (m *BlockFees) String() string { return proto.CompactTextString(m) }
func (*BlockFees) ProtoMessage()    {}
func (*BlockFees) Descriptor() ([]byte, []int) {
	return fileDescriptor_1546a95288d9ea9e, []int{1}
}
func (m *BlockFees) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockFees) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockFees.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockFees) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockFees.Merge(m, src)
}
func (m *BlockFees) XXX_Size() int {
	return m.Size()
}
func (m *BlockFees) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockFees.DiscardUnknown(m)
}

var xxx_messageInfo_BlockFees proto.InternalMessageInfo

func (m *BlockFees) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*ContractInfo)(nil), "helios.feedistribution.v1.ContractInfo")
	proto.RegisterType((*BlockFees)(nil), "helios.feedistribution.v1.BlockFees")
}

func init() {
	proto.RegisterFile("helios/feedistribution/v1/contract.proto", fileDescriptor_1546a95288d9ea9e)
}

var fileDescriptor_1546a95288d9ea9e = []byte{
	// 357 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xc1, 0x6a, 0xf2, 0x40,
	0x10, 0xc7, 0x13, 0xfd, 0xf8, 0xc0, 0xf0, 0x81, 0x1a, 0xfc, 0x40, 0x85, 0x46, 0xf1, 0x64, 0x29,
	0x26, 0x95, 0x3e, 0x41, 0x15, 0x5a, 0xed, 0xd1, 0xde, 0x7a, 0x09, 0x31, 0x19, 0x93, 0xc5, 0x64,
	0x47, 0x76, 0x57, 0xad, 0xb7, 0x3e, 0x41, 0xe9, 0xc3, 0xf4, 0x21, 0x3c, 0x4a, 0x4f, 0xa5, 0x07,
	0x29, 0xfa, 0x22, 0x45, 0xd7, 0xad, 0x52, 0x29, 0xde, 0x66, 0xe7, 0x3f, 0xff, 0xdf, 0xec, 0xec,
	0xac, 0x51, 0x8f, 0x20, 0x26, 0xc8, 0x9d, 0x01, 0x40, 0x40, 0xb8, 0x60, 0xa4, 0x3f, 0x16, 0x04,
	0xa9, 0x33, 0x69, 0x3a, 0x3e, 0x52, 0xc1, 0x3c, 0x5f, 0xd8, 0x23, 0x86, 0x02, 0xcd, 0x92, 0xac,
	0xb4, 0x7f, 0x54, 0xda, 0x93, 0x66, 0xb9, 0x10, 0x62, 0x88, 0xdb, 0x2a, 0x67, 0x13, 0x49, 0x43,
	0xb9, 0xe4, 0x23, 0x4f, 0x90, 0xbb, 0x52, 0x90, 0x07, 0x29, 0xd5, 0x9e, 0x53, 0xc6, 0xbf, 0xf6,
	0x0e, 0xdf, 0xa5, 0x03, 0x34, 0xdb, 0x46, 0x4e, 0xb5, 0x73, 0xbd, 0x20, 0x60, 0xc0, 0x79, 0x51,
	0xaf, 0xea, 0xf5, 0x4c, 0xab, 0xf8, 0xf6, 0xda, 0x28, 0xec, 0xcc, 0xd7, 0x52, 0xb9, 0x17, 0x8c,
	0xd0, 0xb0, 0x97, 0x55, 0x8e, 0x5d, 0x7a, 0x03, 0x09, 0x60, 0x14, 0xe3, 0x0c, 0xd8, 0x37, 0x24,
	0x75, 0x0a, 0xa2, 0x1c, 0x0a, 0x72, 0x6b, 0x98, 0x53, 0x22, 0xa2, 0x80, 0x79, 0xd3, 0x03, 0x4c,
	0xfa, 0x04, 0x26, 0xbf, 0xf7, 0x28, 0xd0, 0x85, 0x91, 0x97, 0xec, 0x04, 0xa8, 0x70, 0x23, 0x20,
	0x61, 0x24, 0x8a, 0x7f, 0xaa, 0x7a, 0x3d, 0xdd, 0xcb, 0xed, 0x85, 0xce, 0x36, 0x5f, 0x7b, 0xd2,
	0x8d, 0x4c, 0x2b, 0x46, 0x7f, 0x78, 0x03, 0xc0, 0xcd, 0xf3, 0xdf, 0x5e, 0xe3, 0x78, 0xe6, 0x8e,
	0x91, 0xf3, 0x7c, 0x7f, 0x9c, 0x8c, 0x63, 0x4f, 0x40, 0xe0, 0x0e, 0x00, 0xd4, 0xcc, 0x67, 0xf3,
	0x65, 0x45, 0xfb, 0x58, 0x56, 0xfe, 0xcb, 0x0b, 0xf3, 0x60, 0x68, 0x13, 0x74, 0x12, 0x4f, 0x44,
	0x76, 0x97, 0x8a, 0x5e, 0xf6, 0xc0, 0xb6, 0x69, 0xda, 0xba, 0x9b, 0xaf, 0x2c, 0x7d, 0xb1, 0xb2,
	0xf4, 0xcf, 0x95, 0xa5, 0xbf, 0xac, 0x2d, 0x6d, 0xb1, 0xb6, 0xb4, 0xf7, 0xb5, 0xa5, 0x3d, 0x5c,
	0xca, 0xcd, 0x37, 0x7c, 0x64, 0xe0, 0xa8, 0x38, 0xf2, 0x08, 0x75, 0x1e, 0x8f, 0xfe, 0x8d, 0x98,
	0x8d, 0x80, 0xf7, 0xff, 0x6e, 0xd7, 0x7c, 0xf5, 0x15, 0x00, 0x00, 0xff, 0xff, 0x54, 0x3a, 0x15,
	0x49, 0x5e, 0x02, 0x00, 0x00,
}

func (m *ContractInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeploymentHeight != 0 {
		i = encodeVarintContract(dAtA, i, uint64(m.DeploymentHeight))
		i--
		dAtA[i] = 0x20
	}
	if len(m.WithdrawerAddress) > 0 {
		i -= len(m.WithdrawerAddress)
		copy(dAtA[i:], m.WithdrawerAddress)
		i = encodeVarintContract(dAtA, i, uint64(len(m.WithdrawerAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DeployerAddress) > 0 {
		i -= len(m.DeployerAddress)
		copy(dAtA[i:], m.DeployerAddress)
		i = encodeVarintContract(dAtA, i, uint64(len(m.DeployerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintContract(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BlockFees) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockFees) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockFees) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.AccumulatedFees.Size()
		i -= size
		if _, err := m.AccumulatedFees.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintContract(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintContract(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintContract(dAtA []byte, offset int, v uint64) int {
	offset -= sovContract(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ContractInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	l = len(m.DeployerAddress)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	l = len(m.WithdrawerAddress)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	if m.DeploymentHeight != 0 {
		n += 1 + sovContract(uint64(m.DeploymentHeight))
	}
	return n
}

func (m *BlockFees) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	l = m.AccumulatedFees.Size()
	n += 1 + l + sovContract(uint64(l))
	return n
}

func sovContract(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozContract(x uint64) (n int) {
	return sovContract(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ContractInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContract
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeployerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeployerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeploymentHeight", wireType)
			}
			m.DeploymentHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeploymentHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipContract(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContract
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockFees) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContract
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockFees: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockFees: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccumulatedFees", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AccumulatedFees.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContract(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContract
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipContract(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowContract
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContract
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContract
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthContract
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupContract
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthContract
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthContract        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowContract          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupContract = fmt.Errorf("proto: unexpected end of group")
)
