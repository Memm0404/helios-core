// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: helios/feedistribution/v1/events.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EventDistributeFees is emitted when fees are distributed at the end of a
// block
type EventDistributeFees struct {
	// block_height is the height at which the distribution occurred
	BlockHeight int64 `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// contract_address is the hex address of the smart contract
	ContractAddress string `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	// deployer_address is the bech32 address receiving the fees
	DeployerAddress string `protobuf:"bytes,3,opt,name=deployer_address,json=deployerAddress,proto3" json:"deployer_address,omitempty"`
	// amount is the amount of fees distributed to the deployer
	Amount string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	// total_block_fees is the total fees collected for this contract in the block
	TotalBlockFees string `protobuf:"bytes,5,opt,name=total_block_fees,json=totalBlockFees,proto3" json:"total_block_fees,omitempty"`
}

func (m *EventDistributeFees) Reset()         { *m = EventDistributeFees{} }
func (m *EventDistributeFees) String() string { return proto.CompactTextString(m) }
func (*EventDistributeFees) ProtoMessage()    {}
func (*EventDistributeFees) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fef6a6ff129db27, []int{0}
}
func (m *EventDistributeFees) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventDistributeFees) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventDistributeFees.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventDistributeFees) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventDistributeFees.Merge(m, src)
}
func (m *EventDistributeFees) XXX_Size() int {
	return m.Size()
}
func (m *EventDistributeFees) XXX_DiscardUnknown() {
	xxx_messageInfo_EventDistributeFees.DiscardUnknown(m)
}

var xxx_messageInfo_EventDistributeFees proto.InternalMessageInfo

func (m *EventDistributeFees) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *EventDistributeFees) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *EventDistributeFees) GetDeployerAddress() string {
	if m != nil {
		return m.DeployerAddress
	}
	return ""
}

func (m *EventDistributeFees) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *EventDistributeFees) GetTotalBlockFees() string {
	if m != nil {
		return m.TotalBlockFees
	}
	return ""
}

// EventContractDeployed is emitted when a new contract is deployed and starts
// being tracked
type EventContractDeployed struct {
	// contract_address is the hex address of the smart contract
	ContractAddress string `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	// deployer_address is the bech32 address of the contract deployer
	DeployerAddress string `protobuf:"bytes,2,opt,name=deployer_address,json=deployerAddress,proto3" json:"deployer_address,omitempty"`
	// deployment_height is the block height at which the contract was deployed
	DeploymentHeight int64 `protobuf:"varint,3,opt,name=deployment_height,json=deploymentHeight,proto3" json:"deployment_height,omitempty"`
}

func (m *EventContractDeployed) Reset()         { *m = EventContractDeployed{} }
func (m *EventContractDeployed) String() string { return proto.CompactTextString(m) }
func (*EventContractDeployed) ProtoMessage()    {}
func (*EventContractDeployed) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fef6a6ff129db27, []int{1}
}
func (m *EventContractDeployed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventContractDeployed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventContractDeployed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventContractDeployed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventContractDeployed.Merge(m, src)
}
func (m *EventContractDeployed) XXX_Size() int {
	return m.Size()
}
func (m *EventContractDeployed) XXX_DiscardUnknown() {
	xxx_messageInfo_EventContractDeployed.DiscardUnknown(m)
}

var xxx_messageInfo_EventContractDeployed proto.InternalMessageInfo

func (m *EventContractDeployed) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *EventContractDeployed) GetDeployerAddress() string {
	if m != nil {
		return m.DeployerAddress
	}
	return ""
}

func (m *EventContractDeployed) GetDeploymentHeight() int64 {
	if m != nil {
		return m.DeploymentHeight
	}
	return 0
}

// EventParamsUpdated is emitted when the module parameters are updated
type EventParamsUpdated struct {
	// new_developer_shares is the updated proportion of fees to distribute
	NewDeveloperShares string `protobuf:"bytes,1,opt,name=new_developer_shares,json=newDeveloperShares,proto3" json:"new_developer_shares,omitempty"`
	// enable_fee_distribution indicates if fee distribution is enabled/disabled
	EnableFeeDistribution bool `protobuf:"varint,2,opt,name=enable_fee_distribution,json=enableFeeDistribution,proto3" json:"enable_fee_distribution,omitempty"`
}

func (m *EventParamsUpdated) Reset()         { *m = EventParamsUpdated{} }
func (m *EventParamsUpdated) String() string { return proto.CompactTextString(m) }
func (*EventParamsUpdated) ProtoMessage()    {}
func (*EventParamsUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fef6a6ff129db27, []int{2}
}
func (m *EventParamsUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventParamsUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventParamsUpdated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventParamsUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventParamsUpdated.Merge(m, src)
}
func (m *EventParamsUpdated) XXX_Size() int {
	return m.Size()
}
func (m *EventParamsUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventParamsUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_EventParamsUpdated proto.InternalMessageInfo

func (m *EventParamsUpdated) GetNewDeveloperShares() string {
	if m != nil {
		return m.NewDeveloperShares
	}
	return ""
}

func (m *EventParamsUpdated) GetEnableFeeDistribution() bool {
	if m != nil {
		return m.EnableFeeDistribution
	}
	return false
}

func init() {
	proto.RegisterType((*EventDistributeFees)(nil), "helios.feedistribution.v1.EventDistributeFees")
	proto.RegisterType((*EventContractDeployed)(nil), "helios.feedistribution.v1.EventContractDeployed")
	proto.RegisterType((*EventParamsUpdated)(nil), "helios.feedistribution.v1.EventParamsUpdated")
}

func init() {
	proto.RegisterFile("helios/feedistribution/v1/events.proto", fileDescriptor_0fef6a6ff129db27)
}

var fileDescriptor_0fef6a6ff129db27 = []byte{
	// 383 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x41, 0x6f, 0xd3, 0x30,
	0x18, 0x86, 0xeb, 0x16, 0x2a, 0x30, 0x08, 0x8a, 0xa1, 0x10, 0x2e, 0x51, 0xe9, 0x01, 0x15, 0x21,
	0x9a, 0x56, 0x48, 0xdc, 0x29, 0xa1, 0x42, 0x9c, 0xa6, 0x4e, 0xbb, 0xec, 0x12, 0x39, 0xf1, 0xd7,
	0x25, 0x5a, 0x6a, 0x47, 0xb6, 0x9b, 0xae, 0x97, 0xfd, 0x86, 0x9d, 0xf7, 0x8b, 0x76, 0xec, 0x71,
	0xc7, 0xa9, 0xfd, 0x23, 0x53, 0xec, 0x7a, 0xab, 0xb6, 0x1e, 0x76, 0x4b, 0xde, 0xf7, 0x91, 0xfc,
	0xf8, 0xf3, 0x87, 0xbf, 0xa6, 0x90, 0x67, 0x42, 0x05, 0x53, 0x00, 0x96, 0x29, 0x2d, 0xb3, 0x78,
	0xae, 0x33, 0xc1, 0x83, 0x72, 0x18, 0x40, 0x09, 0x5c, 0xab, 0x7e, 0x21, 0x85, 0x16, 0xe4, 0xb3,
	0xe5, 0xfa, 0x0f, 0xb8, 0x7e, 0x39, 0xec, 0xae, 0x10, 0x7e, 0xff, 0xb7, 0x62, 0x43, 0x57, 0xc0,
	0x18, 0x40, 0x91, 0x2f, 0xf8, 0x75, 0x9c, 0x8b, 0xe4, 0x34, 0x4a, 0x21, 0x3b, 0x49, 0xb5, 0x87,
	0x3a, 0xa8, 0xd7, 0x98, 0xbc, 0x32, 0xd9, 0x3f, 0x13, 0x91, 0x6f, 0xb8, 0x95, 0x08, 0xae, 0x25,
	0x4d, 0x74, 0x44, 0x19, 0x93, 0xa0, 0x94, 0x57, 0xef, 0xa0, 0xde, 0xcb, 0xc9, 0x5b, 0x97, 0xff,
	0xb6, 0x71, 0x85, 0x32, 0x28, 0x72, 0xb1, 0x04, 0x79, 0x87, 0x36, 0x2c, 0xea, 0x72, 0x87, 0x7e,
	0xc4, 0x4d, 0x3a, 0x13, 0x73, 0xae, 0xbd, 0x67, 0x06, 0xd8, 0xfe, 0x91, 0x1e, 0x6e, 0x69, 0xa1,
	0x69, 0x1e, 0x59, 0xad, 0x29, 0x80, 0xf2, 0x9e, 0x1b, 0xe2, 0x8d, 0xc9, 0x47, 0x55, 0x5c, 0xa9,
	0x77, 0x2f, 0x11, 0x6e, 0x9b, 0x2b, 0xfd, 0xd9, 0x5a, 0x84, 0xf6, 0x08, 0xb6, 0xd7, 0x18, 0x3d,
	0xdd, 0xb8, 0xbe, 0xdf, 0xf8, 0x3b, 0x7e, 0x67, 0xa3, 0x19, 0x70, 0xed, 0xe6, 0xd5, 0x30, 0xf3,
	0x6a, 0xdd, 0x17, 0x76, 0x68, 0xdd, 0x73, 0x4c, 0x8c, 0xdb, 0x01, 0x95, 0x74, 0xa6, 0x8e, 0x0a,
	0x46, 0x35, 0x30, 0x32, 0xc0, 0x1f, 0x38, 0x2c, 0x22, 0x06, 0x25, 0xe4, 0xa2, 0x00, 0x19, 0xa9,
	0x94, 0x4a, 0x70, 0x72, 0x84, 0xc3, 0x22, 0x74, 0xd5, 0xa1, 0x69, 0xc8, 0x2f, 0xfc, 0x09, 0x38,
	0x8d, 0x73, 0xa8, 0x26, 0x11, 0xed, 0xbe, 0xaa, 0xd1, 0x7c, 0x31, 0x69, 0xdb, 0x7a, 0x0c, 0x10,
	0xee, 0x94, 0xa3, 0xff, 0x57, 0x6b, 0x1f, 0xad, 0xd6, 0x3e, 0xba, 0x59, 0xfb, 0xe8, 0x62, 0xe3,
	0xd7, 0x56, 0x1b, 0xbf, 0x76, 0xbd, 0xf1, 0x6b, 0xc7, 0x03, 0xbb, 0x24, 0x3f, 0x12, 0x21, 0x21,
	0x70, 0xdf, 0x29, 0xcd, 0x78, 0x70, 0xf6, 0x68, 0xc1, 0xf4, 0xb2, 0x00, 0x15, 0x37, 0xcd, 0x76,
	0xfd, 0xbc, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x81, 0x43, 0x63, 0x83, 0x87, 0x02, 0x00, 0x00,
}

func (m *EventDistributeFees) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventDistributeFees) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventDistributeFees) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TotalBlockFees) > 0 {
		i -= len(m.TotalBlockFees)
		copy(dAtA[i:], m.TotalBlockFees)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.TotalBlockFees)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DeployerAddress) > 0 {
		i -= len(m.DeployerAddress)
		copy(dAtA[i:], m.DeployerAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.DeployerAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.BlockHeight != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventContractDeployed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventContractDeployed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventContractDeployed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeploymentHeight != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.DeploymentHeight))
		i--
		dAtA[i] = 0x18
	}
	if len(m.DeployerAddress) > 0 {
		i -= len(m.DeployerAddress)
		copy(dAtA[i:], m.DeployerAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.DeployerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventParamsUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventParamsUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventParamsUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EnableFeeDistribution {
		i--
		if m.EnableFeeDistribution {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.NewDeveloperShares) > 0 {
		i -= len(m.NewDeveloperShares)
		copy(dAtA[i:], m.NewDeveloperShares)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.NewDeveloperShares)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventDistributeFees) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeight != 0 {
		n += 1 + sovEvents(uint64(m.BlockHeight))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.DeployerAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.TotalBlockFees)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventContractDeployed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.DeployerAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.DeploymentHeight != 0 {
		n += 1 + sovEvents(uint64(m.DeploymentHeight))
	}
	return n
}

func (m *EventParamsUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NewDeveloperShares)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.EnableFeeDistribution {
		n += 2
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventDistributeFees) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventDistributeFees: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventDistributeFees: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeployerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeployerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBlockFees", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalBlockFees = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventContractDeployed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventContractDeployed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventContractDeployed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeployerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeployerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeploymentHeight", wireType)
			}
			m.DeploymentHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeploymentHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventParamsUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventParamsUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventParamsUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewDeveloperShares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewDeveloperShares = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableFeeDistribution", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableFeeDistribution = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
