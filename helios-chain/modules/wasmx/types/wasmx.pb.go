// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: helios/wasmx/v1/wasmx.proto

package types

import (
	fmt "fmt"
	types "github.com/CosmWasm/wasmd/x/wasm/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Params struct {
	// Set the status to active to indicate that contracts can be executed in
	// begin blocker.
	IsExecutionEnabled bool `protobuf:"varint,1,opt,name=is_execution_enabled,json=isExecutionEnabled,proto3" json:"is_execution_enabled,omitempty"`
	// Maximum aggregate total gas to be used for the contract executions in the
	// BeginBlocker.
	MaxBeginBlockTotalGas uint64 `protobuf:"varint,2,opt,name=max_begin_block_total_gas,json=maxBeginBlockTotalGas,proto3" json:"max_begin_block_total_gas,omitempty"`
	// the maximum gas limit each individual contract can consume in the
	// BeginBlocker.
	MaxContractGasLimit uint64 `protobuf:"varint,3,opt,name=max_contract_gas_limit,json=maxContractGasLimit,proto3" json:"max_contract_gas_limit,omitempty"`
	// min_gas_price defines the minimum gas price the contracts must pay to be
	// executed in the BeginBlocker.
	MinGasPrice            uint64             `protobuf:"varint,4,opt,name=min_gas_price,json=minGasPrice,proto3" json:"min_gas_price,omitempty"`
	RegisterContractAccess types.AccessConfig `protobuf:"bytes,5,opt,name=register_contract_access,json=registerContractAccess,proto3" json:"register_contract_access" yaml:"register_contract_access"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_37d8fa4e5ab09d94, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetIsExecutionEnabled() bool {
	if m != nil {
		return m.IsExecutionEnabled
	}
	return false
}

func (m *Params) GetMaxBeginBlockTotalGas() uint64 {
	if m != nil {
		return m.MaxBeginBlockTotalGas
	}
	return 0
}

func (m *Params) GetMaxContractGasLimit() uint64 {
	if m != nil {
		return m.MaxContractGasLimit
	}
	return 0
}

func (m *Params) GetMinGasPrice() uint64 {
	if m != nil {
		return m.MinGasPrice
	}
	return 0
}

func (m *Params) GetRegisterContractAccess() types.AccessConfig {
	if m != nil {
		return m.RegisterContractAccess
	}
	return types.AccessConfig{}
}

type RegisteredContract struct {
	// limit of gas per BB execution
	GasLimit uint64 `protobuf:"varint,1,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	// gas price that contract is willing to pay for execution in BeginBlocker
	GasPrice uint64 `protobuf:"varint,2,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	// is contract currently active
	IsExecutable bool `protobuf:"varint,3,opt,name=is_executable,json=isExecutable,proto3" json:"is_executable,omitempty"`
	// code_id that is allowed to be executed (to prevent malicious updates) - if
	// nil/0 any code_id can be executed
	CodeId uint64 `protobuf:"varint,4,opt,name=code_id,json=codeId,proto3" json:"code_id,omitempty"`
	// optional - admin addr that is allowed to update contract data
	AdminAddress string `protobuf:"bytes,5,opt,name=admin_address,json=adminAddress,proto3" json:"admin_address,omitempty"`
	// Optional: address of the contract granting fee
	// Must be set if fund_mode is GrantOnly
	GranterAddress string `protobuf:"bytes,6,opt,name=granter_address,json=granterAddress,proto3" json:"granter_address,omitempty"`
	// funding mode
	FundMode FundingMode `protobuf:"varint,7,opt,name=fund_mode,json=fundMode,proto3,enum=helios.wasmx.v1.FundingMode" json:"fund_mode,omitempty"`
}

func (m *RegisteredContract) Reset()         { *m = RegisteredContract{} }
func (m *RegisteredContract) String() string { return proto.CompactTextString(m) }
func (*RegisteredContract) ProtoMessage()    {}
func (*RegisteredContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_37d8fa4e5ab09d94, []int{1}
}
func (m *RegisteredContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisteredContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisteredContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisteredContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisteredContract.Merge(m, src)
}
func (m *RegisteredContract) XXX_Size() int {
	return m.Size()
}
func (m *RegisteredContract) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisteredContract.DiscardUnknown(m)
}

var xxx_messageInfo_RegisteredContract proto.InternalMessageInfo

func (m *RegisteredContract) GetGasLimit() uint64 {
	if m != nil {
		return m.GasLimit
	}
	return 0
}

func (m *RegisteredContract) GetGasPrice() uint64 {
	if m != nil {
		return m.GasPrice
	}
	return 0
}

func (m *RegisteredContract) GetIsExecutable() bool {
	if m != nil {
		return m.IsExecutable
	}
	return false
}

func (m *RegisteredContract) GetCodeId() uint64 {
	if m != nil {
		return m.CodeId
	}
	return 0
}

func (m *RegisteredContract) GetAdminAddress() string {
	if m != nil {
		return m.AdminAddress
	}
	return ""
}

func (m *RegisteredContract) GetGranterAddress() string {
	if m != nil {
		return m.GranterAddress
	}
	return ""
}

func (m *RegisteredContract) GetFundMode() FundingMode {
	if m != nil {
		return m.FundMode
	}
	return FundingMode_Unspecified
}

func init() {
	proto.RegisterType((*Params)(nil), "helios.wasmx.v1.Params")
	proto.RegisterType((*RegisteredContract)(nil), "helios.wasmx.v1.RegisteredContract")
}

func init() { proto.RegisterFile("helios/wasmx/v1/wasmx.proto", fileDescriptor_37d8fa4e5ab09d94) }

var fileDescriptor_37d8fa4e5ab09d94 = []byte{
	// 570 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x93, 0x3f, 0x6f, 0x13, 0x31,
	0x18, 0xc6, 0xe3, 0x10, 0xd2, 0xd4, 0xfd, 0x27, 0x4c, 0x5b, 0x1d, 0x6d, 0xb9, 0x44, 0x61, 0x09,
	0x55, 0x7b, 0x47, 0xdb, 0x05, 0xba, 0x35, 0x55, 0x5b, 0x21, 0x81, 0x54, 0x9d, 0x98, 0x58, 0x4e,
	0xce, 0xd9, 0xbd, 0x5a, 0x9c, 0xed, 0xe8, 0x7c, 0x29, 0xe9, 0x17, 0x60, 0x60, 0xe2, 0x23, 0x30,
	0xb2, 0x20, 0xf5, 0x63, 0x64, 0xec, 0xc8, 0x14, 0xa1, 0x64, 0x28, 0x0b, 0x0b, 0x9f, 0x00, 0xd9,
	0x3e, 0xb7, 0xa8, 0x12, 0xcb, 0xe9, 0xd5, 0xfb, 0x7b, 0x9e, 0xf7, 0xee, 0x7d, 0xec, 0x83, 0xeb,
	0xe7, 0x34, 0x63, 0x52, 0x85, 0x1f, 0xb1, 0xe2, 0xc3, 0xf0, 0x62, 0xc7, 0x16, 0x41, 0x3f, 0x97,
	0x85, 0x44, 0x4b, 0x16, 0x06, 0xb6, 0x77, 0xb1, 0xb3, 0xb6, 0x9c, 0xca, 0x54, 0x1a, 0x16, 0xea,
	0xca, 0xca, 0xd6, 0x36, 0x12, 0xa9, 0xb8, 0xd6, 0x18, 0xb3, 0x1e, 0x52, 0x5c, 0xf6, 0xa9, 0x2a,
	0xe9, 0x23, 0xcc, 0x99, 0x90, 0xa1, 0x79, 0x96, 0x2d, 0xff, 0xfe, 0x4b, 0xfb, 0xb9, 0xec, 0x4b,
	0x85, 0x33, 0xcb, 0xdb, 0xbf, 0xab, 0xb0, 0x7e, 0x8a, 0x73, 0xcc, 0x15, 0x7a, 0x01, 0x97, 0x99,
	0x8a, 0xe9, 0x90, 0x26, 0x83, 0x82, 0x49, 0x11, 0x53, 0x81, 0x7b, 0x19, 0x25, 0x1e, 0x68, 0x81,
	0x4e, 0x23, 0x42, 0x4c, 0x1d, 0x39, 0x74, 0x64, 0x09, 0x7a, 0x09, 0x9f, 0x70, 0x3c, 0x8c, 0x7b,
	0x34, 0x65, 0x22, 0xee, 0x65, 0x32, 0xf9, 0x10, 0x17, 0xb2, 0xc0, 0x59, 0x9c, 0x62, 0xe5, 0x55,
	0x5b, 0xa0, 0x53, 0x8b, 0x56, 0x38, 0x1e, 0x76, 0x35, 0xef, 0x6a, 0xfc, 0x4e, 0xd3, 0x13, 0xac,
	0xd0, 0x1e, 0x5c, 0xd5, 0xce, 0x44, 0x8a, 0x22, 0xc7, 0x49, 0xa1, 0x0d, 0x71, 0xc6, 0x38, 0x2b,
	0xbc, 0x07, 0xc6, 0xf6, 0x98, 0xe3, 0xe1, 0x61, 0x09, 0x4f, 0xb0, 0x7a, 0xa3, 0x11, 0x6a, 0xc3,
	0x05, 0xce, 0x84, 0xd1, 0xf6, 0x73, 0x96, 0x50, 0xaf, 0x66, 0xb4, 0x73, 0x9c, 0x89, 0x13, 0xac,
	0x4e, 0x75, 0x0b, 0x7d, 0x02, 0xd0, 0xcb, 0x69, 0xca, 0x54, 0x41, 0xf3, 0xbb, 0xf1, 0x38, 0x49,
	0xa8, 0x52, 0xde, 0xc3, 0x16, 0xe8, 0xcc, 0xed, 0xfa, 0x81, 0x0b, 0xd1, 0xa4, 0x1d, 0x5c, 0xec,
	0x04, 0x07, 0x86, 0x1f, 0x4a, 0x71, 0xc6, 0xd2, 0xee, 0xd6, 0x68, 0xdc, 0xac, 0xfc, 0x19, 0x37,
	0x9b, 0x97, 0x98, 0x67, 0xfb, 0xed, 0xff, 0x4d, 0x6b, 0x7f, 0xbb, 0xb9, 0xda, 0x04, 0xd1, 0xaa,
	0xe3, 0xee, 0x73, 0xed, 0xac, 0xfd, 0x95, 0x5f, 0x5f, 0x9b, 0xe0, 0xf3, 0xcd, 0xd5, 0xe6, 0xbc,
	0x8d, 0xde, 0x86, 0xdc, 0xfe, 0x5e, 0x85, 0x28, 0x2a, 0x1d, 0x94, 0x38, 0x0f, 0x5a, 0x87, 0xb3,
	0x77, 0x11, 0x00, 0xb3, 0x56, 0x23, 0x75, 0x7b, 0x97, 0xd0, 0xee, 0x5c, 0xbd, 0x85, 0x76, 0xe1,
	0x67, 0x70, 0xe1, 0xf6, 0xd4, 0xf4, 0xa9, 0x98, 0x00, 0x1b, 0xd1, 0xbc, 0x3b, 0x2e, 0xdd, 0x43,
	0x4f, 0xe1, 0x4c, 0x22, 0x09, 0x8d, 0x19, 0xb1, 0x99, 0x75, 0x6b, 0xa3, 0x71, 0x13, 0x44, 0x75,
	0xdd, 0x7c, 0x4d, 0xd0, 0x73, 0xb8, 0x80, 0x89, 0x8e, 0x16, 0x13, 0x92, 0xbb, 0xa0, 0x66, 0x4b,
	0xd1, 0xbc, 0x41, 0x07, 0x96, 0xa0, 0x6d, 0xb8, 0x94, 0xe6, 0x58, 0xe8, 0x3c, 0x9c, 0xb8, 0xfe,
	0x8f, 0x78, 0xb1, 0x84, 0x4e, 0xfe, 0x0a, 0xce, 0x9e, 0x0d, 0x04, 0x89, 0xb9, 0x24, 0xd4, 0x9b,
	0x69, 0x81, 0xce, 0xe2, 0xee, 0x46, 0x70, 0xef, 0xaa, 0x07, 0xc7, 0x03, 0x41, 0x98, 0x48, 0xdf,
	0x4a, 0x42, 0xa3, 0x86, 0x96, 0xeb, 0x6a, 0xbf, 0xa6, 0x03, 0xec, 0x1e, 0x8f, 0x26, 0x3e, 0xb8,
	0x9e, 0xf8, 0xe0, 0xe7, 0xc4, 0x07, 0x5f, 0xa6, 0x7e, 0xe5, 0x7a, 0xea, 0x57, 0x7e, 0x4c, 0xfd,
	0xca, 0xfb, 0x2d, 0x3b, 0x66, 0x3b, 0x91, 0x39, 0x0d, 0x5d, 0x7d, 0x8e, 0x99, 0x08, 0xb9, 0x24,
	0x83, 0x8c, 0xba, 0x3b, 0x6f, 0x7e, 0x90, 0x5e, 0xdd, 0x5c, 0xf7, 0xbd, 0xbf, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x09, 0xb4, 0x41, 0x0b, 0x85, 0x03, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IsExecutionEnabled != that1.IsExecutionEnabled {
		return false
	}
	if this.MaxBeginBlockTotalGas != that1.MaxBeginBlockTotalGas {
		return false
	}
	if this.MaxContractGasLimit != that1.MaxContractGasLimit {
		return false
	}
	if this.MinGasPrice != that1.MinGasPrice {
		return false
	}
	if !this.RegisterContractAccess.Equal(&that1.RegisterContractAccess) {
		return false
	}
	return true
}
func (this *RegisteredContract) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegisteredContract)
	if !ok {
		that2, ok := that.(RegisteredContract)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GasLimit != that1.GasLimit {
		return false
	}
	if this.GasPrice != that1.GasPrice {
		return false
	}
	if this.IsExecutable != that1.IsExecutable {
		return false
	}
	if this.CodeId != that1.CodeId {
		return false
	}
	if this.AdminAddress != that1.AdminAddress {
		return false
	}
	if this.GranterAddress != that1.GranterAddress {
		return false
	}
	if this.FundMode != that1.FundMode {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RegisterContractAccess.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintWasmx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.MinGasPrice != 0 {
		i = encodeVarintWasmx(dAtA, i, uint64(m.MinGasPrice))
		i--
		dAtA[i] = 0x20
	}
	if m.MaxContractGasLimit != 0 {
		i = encodeVarintWasmx(dAtA, i, uint64(m.MaxContractGasLimit))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxBeginBlockTotalGas != 0 {
		i = encodeVarintWasmx(dAtA, i, uint64(m.MaxBeginBlockTotalGas))
		i--
		dAtA[i] = 0x10
	}
	if m.IsExecutionEnabled {
		i--
		if m.IsExecutionEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RegisteredContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisteredContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisteredContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FundMode != 0 {
		i = encodeVarintWasmx(dAtA, i, uint64(m.FundMode))
		i--
		dAtA[i] = 0x38
	}
	if len(m.GranterAddress) > 0 {
		i -= len(m.GranterAddress)
		copy(dAtA[i:], m.GranterAddress)
		i = encodeVarintWasmx(dAtA, i, uint64(len(m.GranterAddress)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.AdminAddress) > 0 {
		i -= len(m.AdminAddress)
		copy(dAtA[i:], m.AdminAddress)
		i = encodeVarintWasmx(dAtA, i, uint64(len(m.AdminAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if m.CodeId != 0 {
		i = encodeVarintWasmx(dAtA, i, uint64(m.CodeId))
		i--
		dAtA[i] = 0x20
	}
	if m.IsExecutable {
		i--
		if m.IsExecutable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.GasPrice != 0 {
		i = encodeVarintWasmx(dAtA, i, uint64(m.GasPrice))
		i--
		dAtA[i] = 0x10
	}
	if m.GasLimit != 0 {
		i = encodeVarintWasmx(dAtA, i, uint64(m.GasLimit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintWasmx(dAtA []byte, offset int, v uint64) int {
	offset -= sovWasmx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsExecutionEnabled {
		n += 2
	}
	if m.MaxBeginBlockTotalGas != 0 {
		n += 1 + sovWasmx(uint64(m.MaxBeginBlockTotalGas))
	}
	if m.MaxContractGasLimit != 0 {
		n += 1 + sovWasmx(uint64(m.MaxContractGasLimit))
	}
	if m.MinGasPrice != 0 {
		n += 1 + sovWasmx(uint64(m.MinGasPrice))
	}
	l = m.RegisterContractAccess.Size()
	n += 1 + l + sovWasmx(uint64(l))
	return n
}

func (m *RegisteredContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GasLimit != 0 {
		n += 1 + sovWasmx(uint64(m.GasLimit))
	}
	if m.GasPrice != 0 {
		n += 1 + sovWasmx(uint64(m.GasPrice))
	}
	if m.IsExecutable {
		n += 2
	}
	if m.CodeId != 0 {
		n += 1 + sovWasmx(uint64(m.CodeId))
	}
	l = len(m.AdminAddress)
	if l > 0 {
		n += 1 + l + sovWasmx(uint64(l))
	}
	l = len(m.GranterAddress)
	if l > 0 {
		n += 1 + l + sovWasmx(uint64(l))
	}
	if m.FundMode != 0 {
		n += 1 + sovWasmx(uint64(m.FundMode))
	}
	return n
}

func sovWasmx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWasmx(x uint64) (n int) {
	return sovWasmx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWasmx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsExecutionEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsExecutionEnabled = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBeginBlockTotalGas", wireType)
			}
			m.MaxBeginBlockTotalGas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxBeginBlockTotalGas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxContractGasLimit", wireType)
			}
			m.MaxContractGasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxContractGasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinGasPrice", wireType)
			}
			m.MinGasPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinGasPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterContractAccess", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWasmx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWasmx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RegisterContractAccess.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWasmx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWasmx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisteredContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWasmx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisteredContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisteredContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
			}
			m.GasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPrice", wireType)
			}
			m.GasPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsExecutable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsExecutable = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeId", wireType)
			}
			m.CodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CodeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWasmx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWasmx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GranterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWasmx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWasmx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GranterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FundMode", wireType)
			}
			m.FundMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FundMode |= FundingMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWasmx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWasmx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWasmx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWasmx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWasmx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWasmx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWasmx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWasmx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWasmx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWasmx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWasmx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWasmx = fmt.Errorf("proto: unexpected end of group")
)
